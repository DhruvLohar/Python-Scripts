UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

DELETE FROM table_name
WHERE condition;

ALTER TABLE table_name
ADD column_name datatype;

# JOINS

SELECT columns
FROM table1
INNER JOIN table2 ON table1.column = table2.column;

SELECT columns
FROM table1
LEFT JOIN table2 ON table1.column = table2.column;

SELECT columns
FROM table1
FULL JOIN table2 ON table1.column = table2.column;

# CONSTRAINTS
CREATE TABLE table_name (
    column1 datatype NOT NULL,
    column2 datatype UNIQUE,
    ...
);

ALTER TABLE table_name
ADD CONSTRAINT constraint_name UNIQUE (column_name);

ALTER TABLE table_name
ALTER COLUMN column_name SET NOT NULL;

ALTER TABLE orders
ADD CONSTRAINT check_order_amount CHECK (order_amount > 0);

ALTER TABLE child_table
ADD CONSTRAINT fk_constraint_name
FOREIGN KEY (child_column)
REFERENCES parent_table(parent_column);

# STRING
SELECT 
    CONCAT(column1, column2) AS concatenated_string,
    SUBSTRING(column_name, start_position, length) AS substring,
    LENGTH(column_name) AS string_length,
    UPPER(column_name) AS uppercase_string,
    LOWER(column_name) AS lowercase_string,
    TRIM(both ' ' FROM column_name) AS trimmed_string
FROM table_name;

# NESTED QUERY
# Subquery, independent:
SELECT * FROM mytable WHERE style in ( SELECT code FROM othertable WHERE sales > 2000);
#
# Subquery, correlated (inner query runs once for each row of outer):
SELECT id FROM mytable AS x WHERE length > ( SELECT AVG(length) FROM mytable WHERE style = x.coordinate);

# UNION, with named inner query result table
SELECT avg(a.sale_price) FROM (SELECT sale_price FROM order_items UNION ALL SELECT sale_price FROM order_items_historic) AS a;
# compare INTERSECT, EXCEPT

# AGGREGATE FUCNTIONS
select lname, sum(sal) from emp group by lname having sum(sal) > 10000

# TCL CMNDS

-- Begin a transaction
BEGIN TRANSACTION;

-- Perform some operations
UPDATE employees
SET salary = salary * 1.1
WHERE department = 'Sales';

DELETE FROM payroll
WHERE employee_id = 101;

-- Check the changes before committing
SELECT * FROM employees WHERE department = 'Sales';
SELECT * FROM payroll WHERE employee_id = 101;

-- If everything looks good, commit the transaction
COMMIT;

# delimiter and trigger 
delimiter //
create trigger trig_name before insert on table-name for each row begin 

if new.age>18 then set new.adult = 1; else set new.adult = 0;
end if;
end //
delimiter ;

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);

